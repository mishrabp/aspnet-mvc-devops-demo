# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# Pipelibe only builds the node app

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - aspnet-mvc-devops-demo/Pipelines/*
    - Pipelines/*
    - .vs/*

variables:
- group: TerraformVariableGroup
- name: subscription
  value: 'Visual Studio Subscription - 113136'
- name: location
  value: 'westus'
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'release'
- name: artifactName
  value: 'drop'

stages:
- stage: CodeScan
  displayName: 'Scan Code for Vulnerability'
  jobs:
  - job: Scan
    pool:
      name: "MyBuildAgents"
      demands: Node.js 
    steps:
    - task: WhiteSource@21
      displayName: 'Scan vulnerabilities using WhiteSoure Bolt'
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'
        projectName: 'aspnet-mvc-devops-demo'
        directScan: true
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'aspnet-mvc-devops-demo'
        cliProjectName: 'aspnet-mvc-devops-demo'
        cliSources: '.'

    - task: SonarQubeAnalyze@4


- stage: Build
  displayName: 'Build Code'
  jobs:
  - job: Build
    pool:
      name: "MyBuildAgents"
      vmImage: 'windows-latest'
      demands: VisualStudio 

    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(solution)'
      enabled: true

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: VSTest@2
      displayName: 'Test Assemblies'
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
      enabled: false

    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      enabled: false
      continueOnError: true

    - task: CopyFiles@2
      displayName: 'Copy Terraforms to: $(build.artifactstagingdirectory)/Terraform'
      inputs:
        SourceFolder: Pipelines/Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      condition: succeededOrFailed()
      
- stage: Infrastructure
  displayName: 'Setup Infrastrucure in Azure'
  dependsOn: Build
  jobs:
  - template: setup-appservice-on-azure.yml
    parameters:
      subscription: $(subscription)
      terraformstoragerg: $(terraformstoragerg)
      terraformstorageaccount: $(terraformstorageaccount)
      terraformcontainer: $(terraformcontainer)

- stage: QA
  displayName: 'Deploy Code to QA'
  dependsOn: Infrastructure
  pool:
    name: "MyBuildAgents"
    vmImage: 'windows-latest'
    demands: VisualStudio 

  variables: 
    Environment: QA
  jobs:
  - template: deploy-appservice-template.yml
    parameters:
      environment: ${{ variables.environment }} 
      webAppName: '$(AppServicePrefix)-qa'
      subscription: $(subscription)


#- stage: Production
#  displayName: 'Deploy Code to Prod'
#  dependsOn: QA
#  pool:
#    name: "MyBuildAgents"
#    vmImage: 'windows-latest'
#    demands: VisualStudio
    
#  variables: 
#    Environment: Production
#  jobs:
#  - template: deploy-appservice-template.yml
#    parameters:
#      environment: ${{ variables.environment }} 
#      webAppName: '$(AppServicePrefix)-prod'
#      subscription: $(subscription)

# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# Pipelibe only builds the node app

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - aspnet-mvc-devops-demo/Pipelines/*
    - Pipelines/*
    - .vs/*

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'release'
  artifactName: 'drop'
  subscription: 'Visual Studio Ultimate with MSDN'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: "MyBuildAgents"
      vmImage: 'windows-latest'
      demands:
      - myCustomCapability   # check for existence of capability
      - agent.name -equals devopsnode3windowsvm # check for specific string in capability

    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(solution)'
      enabled: true

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: VSTest@2
      displayName: 'Test Assemblies'
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
      enabled: false

    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      enabled: false
      continueOnError: true

    - task: CopyFiles@2
      displayName: 'Copy Terraforms to: $(build.artifactstagingdirectory)/Terraform'
      inputs:
        SourceFolder: Pipelines/Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      condition: succeededOrFailed()


- stage: QA
  dependsOn: Build
  pool:
    name: "MyBuildAgents"
    vmImage: 'windows-latest'
    demands:
    - myCustomCapability   # check for existence of capability
    - agent.name -equals devopsnode3windowsvm # check for specific string in capability
  variables: 
    Environment: QA
  jobs:
  - template: deploy-appservice-template.yml
    parameters:
      environment: ${{ variables.environment }} 
      webAppName: my-azure-app-service-qa
      subscription: $(subscription)


- stage: Production
  dependsOn: QA
  pool:
    name: "MyBuildAgents"
    vmImage: 'windows-latest'
    demands:
    - myCustomCapability   # check for existence of capability
    - agent.name -equals devopsnode3windowsvm # check for specific string in capability
  variables: 
    Environment: Production
  jobs:
  - template: deploy-appservice-template.yml
    parameters:
      environment: ${{ variables.environment }} 
      webAppName: my-azure-app-service-prod
      subscription: $(subscription)

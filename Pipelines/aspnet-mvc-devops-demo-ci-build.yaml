# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# Pipelibe only builds the node app

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - aspnet-mvc-devops-demo/Pipelines/*
    - Pipelines/*
    - .vs/*

pool:
  name: "MyBuildAgents"
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'drop'
  terraformstoragerg: terraformstoragerg
  terraformstorageaccount: terraformstorageaccount
  storagekey: updated-at-run-time

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Terraforms to: $(build.artifactstagingdirectory)/Terraform'
      inputs:
        SourceFolder: Pipelines/Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      condition: succeededOrFailed()


- stage: Setup_Infrastructure
  jobs:
  - job: Terraform
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Visual Studio Ultimate with MSDN(1)(97ef1d65-5a13-4f6a-8729-1655275dadf0)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          #this will create azure resource group for terraform workspace. terraform maintains its state here. 
          call az group create --location westus --name $(terraformstoragerg)
          
          call az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location westus --sku standard_LRS
          
          call az storage container create --name terraform --account-name $(terraformstorageaccount) 
          
          call az account keys list -q $(terraformstoragerg) -n $(terraformstorageaccount)
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Visual Studio Ultimate with MSDN(1)(97ef1d65-5a13-4f6a-8729-1655275dadf0)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          #Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account 
          $key = (Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
          
          Write-Host "##vso[task.setvariable variable=storagekey]$key"


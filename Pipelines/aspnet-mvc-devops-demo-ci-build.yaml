# This is a test pipeline to demo terraform - app service creation
# branch is explicitly marked as none for it not to trigger any check-in.

# Pipelibe only builds the node app

trigger:
  branches:
    include:
    - none
  paths:
    exclude:
    - aspnet-mvc-devops-demo/Pipelines/*
    - Pipelines/*
    - .vs/*


variables:
  artifactName: 'drop'
  terraformstoragerg: terraformstoragerg
  terraformstorageaccount: terraformsabpm2021
  terraformcontainer: terraform
  storagekey: updated-at-run-time

stages:
- stage: Build
  pool:
    name: "MyBuildAgents"
    demands: node.js 
  jobs:
  - job: Build
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Terraforms to: $(build.artifactstagingdirectory)/Terraform'
      inputs:
        SourceFolder: Pipelines/Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      condition: succeededOrFailed()


- stage: SetupInfrastructure
  dependsOn: Build
  pool:
    name: "MyBuildAgents"
    demands: node.js 
  jobs:
  - job: Terraform
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        targetPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureCLI@2
      displayName: 'Create storage for Terraform'
      inputs:
        azureSubscription: 'Visual Studio Ultimate with MSDN(97ef1d65-5a13-4f6a-8729-1655275dadf0)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          #will create azure resource group for terraform workspace. terraform maintains its state here. 
                              az group create --location westus --name $(terraformstoragerg) 
                              
                              az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location westus --sku standard_LRS 
                              
                              # Get storage account key
                              ACCOUNT_KEY=$(az storage account keys list --resource-group $(terraformstoragerg)  --account-name $(terraformstorageaccount) --query '[0].value' -o tsv)
                              az storage container create --name $(terraformcontainer) --account-name $(terraformstorageaccount) --account-key $ACCOUNT_KEY
                              
                              #az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
        enabled: true

    - task: AzurePowerShell@5
      displayName: 'Get the storage key'
      inputs:
        azureSubscription: 'Visual Studio Ultimate with MSDN(97ef1d65-5a13-4f6a-8729-1655275dadf0)'
        ScriptType: 'InlineScript'
        Inline: |
          #Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account 
                    #$key = (Get-AzStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
                    $Key = (Get-AzStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
          
                    Write-Host "storage account key 1 = " $Key
                    
                    Write-Host "##vso[task.setvariable variable=storagekey]$Key"
        azurePowerShellVersion: latestVersion
        pwsh: true
        enabled: false

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '0.12.3'
    - task: Bash@3
      displayName: 'Debug Console'
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          echo 'Artifcat Path: $(System.DefaultWorkingDirectory)'

    - task: TerraformTaskV2@2
      displayName: 'Terraform : init'
      inputs:
        provider: 'azurerm'
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: 'Visual Studio Ultimate with MSDN(97ef1d65-5a13-4f6a-8729-1655275dadf0)'
        backendAzureRmResourceGroupName: '$(terraformstoragerg)'
        backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
        backendAzureRmContainerName: $(terraformcontainer)
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTaskV2@2
      displayName: 'Terraform : plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        environmentServiceNameAzureRM: 'Visual Studio Ultimate with MSDN(97ef1d65-5a13-4f6a-8729-1655275dadf0)'

    - task: TerraformTaskV2@2
      displayName: 'Terraform : apply'
      inputs:
         provider: 'azurerm'
         command: 'apply'
         workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
         commandOptions: '-auto-approve'
         environmentServiceNameAzureRM: 'Visual Studio Ultimate with MSDN(97ef1d65-5a13-4f6a-8729-1655275dadf0)'
      continueOnError: true
    
    - task: TerraformTaskV2@2
      displayName: 'Terraform : destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'Visual Studio Ultimate with MSDN(97ef1d65-5a13-4f6a-8729-1655275dadf0)'   
